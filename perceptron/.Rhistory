geom_point(aes(x = Sepal.Length, y = Sepal.Width, col = Species),
data = iris.perceptron) +
# Our line is defined by t(B)*x = 0, so x2 = -b0/b2 - b1/b2x1
geom_abline(intercept = -(beta.update[1]/beta.update[3]),
slope = -(beta.update[2]/beta.update[3]),
data = iris.perceptron)
tail(beta.update)
ggplot() +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, col = Species),
data = iris.perceptron) +
# Our line is defined by t(B)*x = 0, so x2 = -b0/b2 - b1/b2x1
geom_abline(intercept = -(beta.update[101, 1]/beta.update[101, 3]),
slope = -(beta.update[101,2]/beta.update[101, 3]),
data = iris.perceptron)
12%%4
110%%4
geom_abline
?layer
ggplot() +
geom_abline(slope = 1, intercept = 2)
ggplot() +
geom_point(aes(x = c(1,2), y = c(0,4)))
ggplot() +
geom_point(aes(x = c(0,4), y = c(0,4)))
ggplot() +
geom_point(aes(x = c(0,4), y = c(0,4))) +
geom_abline(slope = 1, intercept = 2)
set.seed(0)
beta.init <- runif(3)
set.seed(0)
beta.init <- runif(3)
ggplot(iris.perceptron) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
# Our line is defined by t(B)*x = 0, so x2 = -b0/b2 - b1/b2x1
geom_abline(intercept = -(beta.init[1]/beta.init[3]),
slope = -(beta.init[2]/beta.init[3]))
beta.init
p <- 0.7
beta.update = beta.init + p * missed[1, 'label'] * c(1, missed$Sepal.Length[1],
missed$Sepal.Width[1])
ggplot() +
geom_point(aes(x = Sepal.Length, y = Sepal.Width), col = 'black', size = 3,
data = missed[1,]) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, col = Species),
data = iris.perceptron) +
# Our line is defined by t(B)*x = 0, so x2 = -b0/b2 - b1/b2x1
geom_abline(intercept = -(beta.update[1]/beta.update[3]),
slope = -(beta.update[2]/beta.update[3]),
data = iris.perceptron)
beta.update
beta.init
p <- 0.7
beta.update <- t(replicate(nrow(iris.matrix) + 1, beta.init))
for(i in 1:nrow(iris.matrix)){
# First, evaluate the algorithm with current weights.
iris.perceptron$prediction <- perceptron(iris.matrix, beta.update[i, ])
if(i %% 10 == 0){
print(paste('Error = ',sum(iris.perceptron$prediction != iris.perceptron$label)))
}
# If the current observation is misclassified, update our betas
if(iris.perceptron$prediction[i] != iris.perceptron$label[i]){
beta.update[i + 1, ] <-  beta.update[i, ] + (p * iris.perceptron$label[i] * c(1,        iris.perceptron$Sepal.Length[i], iris.perceptron$Sepal.Width[i]))
} else {
beta.update[i + 1, ] <- beta.update[i, ]
}
}
ggplot() +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, col = Species),
data = iris.perceptron) +
# Our line is defined by t(B)*x = 0, so x2 = -b0/b2 - b1/b2x1
geom_abline(intercept = -(beta.update[101, 1]/beta.update[101, 3]),
slope = -(beta.update[101,2]/beta.update[101, 3]),
data = iris.perceptron)
ggplot() +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, col = Species),
data = iris.perceptron) +
# Our line is defined by t(B)*x = 0, so x2 = -b0/b2 - b1/b2x1
geom_abline(intercept = -(beta.update[101, 1]/beta.update[101, 3]),
slope = -(beta.update[101,2]/beta.update[101, 3]),
data = iris.perceptron)
knitr::opts_chunk$set(echo = TRUE)
data.frame(x1 = rnorm(100),
x2 = rnorm(100))
data$y <- sign(x1 - x2^2)
data$y <- sign(data$x1 - data$x2^2)
data <- data.frame(x1 = rnorm(100),
x2 = rnorm(100))
data$y <- sign(data$x1 - data$x2^2)
library(ggplot2)
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
set.seed(0)
data <- data.frame(x1 = runif(100),
x2 = runif(100))
data$y <- sign(data$x1 - data$x2^2)
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
data$y <- sign(data$x1 - 3 * data$x2^2)
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
set.seed(0)
data <- data.frame(x1 = runif(100),
x2 = runif(100))
data$y <- sign(data$x1 - 3 * data$x2^2)
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
data$y <- sign(data$x1 - 3 * data$x2^5)
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
data$y <- sign(data$x1 -  data$x2^10)
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
data$y <- sign(data$x1 -  data$x2^2)
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
set.seed(0)
data <- data.frame(x1 = runif(100),
x2 = runif(100))
data$y <- sign(sin(x1))
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
data$y <- sign(sin(data$x1))
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
data$y <- sign(sin(4 * data$x1))
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
data$y <- sign(sin(4 * data$x1) - x2)
data$y <- sign(sin(4 * data$x1) - data$x2)
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
perceptron.matrix <- model.matrix(~ x1 + x2 + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2),
data = data)
head(perceptron.matrix)
weights <- rep(0, 6)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
perceptron.matrix <- model.matrix(~ x1 + x2 + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2),
data = data)
set.seed(0)
data <- data.frame(x1 = runif(100),
x2 = runif(100))
data$y <- sign(sin(4 * data$x1) - data$x2)
ggplot() +
geom_point(aes(x = x1, y = x2, col = as.factor(y)), data = data)
perceptron.matrix <- model.matrix(~ x1 + x2 + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2),
data = data)
perceptron <- function(data, betas){
sign(data %*% betas)
}
weights <- rep(0, 6)
max.iter <- 10000
for(i in 1:max.iter){
index <- i %% nrow(perceptron.matrix)
# Recalculating the predictions each iteration is super inefficient, but fine for
# this small dataset
predictions <- perceptron(perceptron.matrix %*% weights)
}
weights <- rep(0, 6)
max.iter <- 10000
for(i in 1:max.iter){
index <- i %% nrow(perceptron.matrix)
# Recalculating the predictions each iteration is super inefficient, but fine for
# this small dataset
predictions <- perceptron(perceptron.matrix, weights)
}
knitr::opts_chunk$set(echo = TRUE)
geyser <- data("faithful")
geyser <- data(faithful)
library(ggplot2)
head(geyser)
geyser <- data(faithful)
head(geyser)
head(faithful)
data(faithful)
ggplot() +
geom_point(aes(x = waiting, y = erupctions),
data = faithful) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
theme_bw()
?faithful
centroids <- faithful[sample(length(faithful), 2), ]
centroids$label <- c('A', 'B')
set.seed(123)
centroids <- faithful[sample(length(faithful), 2), ]
centroids$label <- c('A', 'B')
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
set.seed(1234)
centroids <- faithful[sample(length(faithful), 2), ]
centroids$label <- c('A', 'B')
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
set.seed(12345)
centroids <- faithful[sample(length(faithful), 2), ]
centroids$label <- c('A', 'B')
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
centroids
set.seed(2)
centroids <- faithful[sample(length(faithful), 2), ]
centroids$label <- c('A', 'B')
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
sample(length(faithful), 2)
length(faithful)
set.seed(2)
centroids <- faithful[sample(nrow(faithful), 2), ]
centroids$label <- c('A', 'B')
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
faithful <- scale(faithful)
head(faithful)
faithful <- scale(faithful)
set.seed(2)
centroids <- faithful[sample(nrow(faithful), 2), ]
centroids$label <- c('A', 'B')
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
faithful <- scale(faithful) %>%
as.data.frame()
library(dplyr)
faithful <- scale(faithful) %>%
as.data.frame()
set.seed(2)
centroids <- faithful[sample(nrow(faithful), 2), ]
centroids$label <- c('A', 'B')
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
?norm
?dist
euc_distance <- function(x1, x2) sqrt((x1 - x2) ^ 2)
euc_distance <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
euc_distance(faithful[, 1:2], centroids[,1:2])
euc_distance(faithful[1, 1:2], centroids[1,1:2])
euc_distance(faithful[1, 1:2], centroids[2,1:2])
apply(centroids[, 1:2], 1, faithful[1, 1:2])
apply(centroids[, 1:2], 1, euc_distance, faithful[1, 1:2])
closest_centroid <- function(x, centroids){
apply(centroids[, 1:2], 1, euc_distance, x) %>%
which.min()
}
closest_centroid(faithful[1, 1:2])
closest_centroid(faithful[1, 1:2], centroids)
euc_distance <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
closest_centroid <- function(x, centroids){
apply(centroids[, 1:2], 1, euc_distance, x) %>%
which.min()
}
assign <- function(data, centroids){
apply(data[, 1:2], 1, closest_centroid, centroids)
}
assign(faithful, centroids)
faithful$label <- assign_label(faithful, centroids)
assign_label <- function(data, centroids){
apply(data[, 1:2], 1, closest_centroid, centroids)
}
faithful$label <- assign_label(faithful, centroids)
head(faithful)
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
theme_bw()
assign_label <- function(data, centroids){
ind <- apply(data[, 1:2], 1, closest_centroid, centroids)
centroids$label[ind]
}
faithful$label <- assign_label(faithful, centroids)
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
head(faithful)
centers <- faithful %>%
group_by(label) %>%
summarize(eruptions.center = mean(eruptions),
waiting.center = mean(waiting))
centers
centers
new.centers <- faithful %>%
group_by(label) %>%
summarize(eruptions.center = mean(eruptions),
waiting.center = mean(waiting))
centroids[1, 1:2] <- new.centers[new.centers$label == 'A', 2:3]
centroids[2, 1:2] <- new.centers[new.centers$label == 'B', 2:3]
centroids
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
theme_bw()
update_centroids <- function(data, centroids){
new.centers <- data %>%
group_by(label) %>%
summarize(eruptions.center = mean(eruptions),
waiting.center = mean(waiting))
centroids[1:2, 1:2] <- new.centers[1:2, 2:3]
centroids
}
centroids <- update_centroids(faithful, centroids)
centroids
centroids
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
theme_bw()
faithful$label <- assign_label(faithful, centroids)
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
centroids <- update_centroids(faithful, centroids)
faithful$label <- assign_label(faithful, centroids)
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
centroids <- update_centroids(faithful, centroids)
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
faithful$label <- assign_label(faithful, centroids)
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
faithful$label <- assign_label(faithful, centroids)
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
centroids <- update_centroids(faithful, centroids)
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
centroids <- update_centroids(faithful, centroids)
ggplot() +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 2) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 3, shape = 3) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids, size = 2, shape = 3) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 3, shape = 'c') +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids, size = 2, shape = 'c') +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 3, shape = 15) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids, size = 2, shape = 15) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = faithful) +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 3, shape = 17) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids, size = 2, shape = 17) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 3, shape = 17) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
theme_bw()
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 3, shape = 17) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids, size = 2, shape = 17)
ggplot() +
geom_point(aes(x = waiting, y = eruptions),
data = centroids, size = 3, shape = 17) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = centroids, size = 2, shape = 17) +
geom_point(aes(x = waiting, y = eruptions, col = label),
data = faithful) +
theme_bw()
install.packages('gganimate')
install.packages('gganimate')
?install.packages
install.packages('gganimate')
install.packages('gganimate')
version
install.packages('tidyr')
